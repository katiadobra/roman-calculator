{"version":3,"sources":["utils/RomanToInt.js","utils/IntToRoman.js","components/Calculator/Calculator.js","components/Aux.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["numeralsMap","M","CM","D","CD","C","L","XL","X","IX","V","IV","I","romanToInt","value","RegExp","test","isRoman","console","log","romanChars","split","total","forEach","char","index","chars","currentValue","toRoman","args","number","result","i","Calculator","props","useState","firstRomanNum","setFirstRomanNum","secondRomanNum","setSecondRomanNum","firstIntNum","setFirstIntNum","secondIntNum","setSecondIntNum","setResult","resultInt","setResultInt","handleRomanNumerals","event","target","newInt","handleRomanNumerals2","HandleResultClick","operation","preventDefault","sum","IntToRoman","className","type","onChange","onFocus","placeholder","onClick","e","aux","children","Header","Footer","App","Aux","Boolean","window","location","hostname","match","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb2b43ca.chunk.js","sourcesContent":["// const conversion = {\n//   \"I\": 1,\n//   \"V\": 5,\n//   \"X\": 10,\n//   \"L\": 50,\n//   \"C\": 100,\n//   \"D\": 500,\n//   \"M\": 1000\n// }\n\nconst numeralsMap = {\n  M: 1000,\n  CM: 900,\n  D: 500,\n  CD: 400,\n  C: 100,\n  L: 50,\n  XL: 40,\n  X: 10,\n  IX: 9,\n  V: 5,\n  IV: 4,\n  I: 1,\n};\n\nconst isRoman = (value) =>{\n  return !value ? false : new RegExp(/^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/).test(value);\n}\n\nconst romanToInt = (value) => {\n  if (!isRoman(value)) {\n    console.log('Invalid Roman numeral');\n    return null;\n  }\n\n  \n\n  const romanChars = value.split('');\n\n  let total = 0;\n\n  romanChars.forEach((char, index, chars) => {\n    const currentValue = numeralsMap[char];\n    const nextValue = numeralsMap[chars[index + 1]];\n\n    if (currentValue < nextValue) {\n      total -= currentValue;\n    } else {\n      total += currentValue;\n    }\n  });\n\n  return total;\n\n  // const array = s.split('');\n\n  // let total = 0,\n  //     current,\n  //     currentValue,\n  //     next,\n  //     nextValue;\n\n  // for (let i = 0; i < array.length; i++) {\n  //   current = array[i];\n  //   currentValue = conversion[current];\n\n  //   next = array[i + 1];\n  //   nextValue = conversion[next];\n\n  //   if(currentValue < nextValue) {\n  //     total -= (currentValue);\n  //   } else {\n  //     total += (currentValue);\n  //   }\n  // }\n  // return total;\n}\n\nexport default romanToInt;\n","// Non recursive\n// const toRoman = (args) => {\n//   const number = {\n//     'M': 1000, 'CM': 900,\n//     'D': 500, 'CD': 400,\n//     'C': 100, 'XC': 90,\n//     'L': 50, 'XL': 40,\n//     'X': 10, 'IX': 9,\n//     'V': 5, 'IV': 4,\n//     'I': 1\n//   };\n\n//   let result = '';\n\n//   for (i in number) {\n//     while (args >= number[i]) {\n//       result += i;\n//       args -= number[i];\n//     }\n//   }\n\n//   return result;\n// }\n\n// Recursive way\nconst toRoman = (args) => {\n  const number = {\n    'M': 1000, 'CM': 900,\n    'D': 500, 'CD': 400,\n    'C': 100, 'XC': 90,\n    'L': 50, 'XL': 40,\n    'X': 10, 'IX': 9,\n    'V': 5, 'IV': 4,\n    'I': 1\n  };\n\n  let result = '';\n\n  if (args === 0) {\n    return result;\n  } else {\n    for (let i in number) {\n      if (args >= number[i]) {\n        result += i;\n        return result + toRoman(args -= number[i]);\n      }\n    }\n  }\n}\n\nexport default toRoman;\n","import React, { useState } from 'react';\nimport romanToInt from '../../utils/RomanToInt';\nimport IntToRoman from '../../utils/IntToRoman';\nimport './Calculator.scss';\n\nconst Calculator = props => {\n  const [firstRomanNum, setFirstRomanNum] = useState('');\n  const [secondRomanNum, setSecondRomanNum] = useState('');\n  const [firstIntNum, setFirstIntNum] = useState(null);\n  const [secondIntNum, setSecondIntNum] = useState(null);\n  const [result, setResult] = useState(null);\n  const [resultInt, setResultInt] = useState(null);\n\n  const handleRomanNumerals = (event) => {\n    setFirstRomanNum(event.target.value);\n    let newInt = romanToInt(event.target.value);\n    setFirstIntNum(newInt);\n    console.log('firstIntNum', firstIntNum);\n  }\n\n  const handleRomanNumerals2 = (event) => {\n    setSecondRomanNum(event.target.value);\n    let newInt = romanToInt(event.target.value);\n    setSecondIntNum(newInt);\n    console.log('secondIntNum', secondIntNum);\n  }\n\n  const HandleResultClick = (event, operation) => {\n    event.preventDefault();\n    let result;\n\n    switch (operation) {\n      case 'plus':\n        result = firstIntNum + secondIntNum;\n        break;\n      case 'minus':\n        result = firstIntNum - secondIntNum;\n        break;\n      case 'multiply':\n        result = firstIntNum * secondIntNum;\n        break;\n      default:\n        console.log(`Error`);\n    }\n\n    let sum = IntToRoman(result);\n    setResult(sum);\n    setResultInt(result);\n  }\n\n  return (\n    <main>\n      <div className=\"app-form-wrapper\">\n        <div className=\"app-form-holder\">\n          <form className=\"app-form\">\n            <div className=\"app-form__block\">\n              <h3 className=\"app-form__ttl\">Accepted Roman Symbols: <span>I, V, X, L, C, D, M</span></h3>\n            </div>\n            <div className=\"app-form__block\">\n              <div className=\"app-input\">\n                <input\n                  className=\"app-input__field\"\n                  type=\"text\"\n                  value={firstRomanNum}\n                  onChange={handleRomanNumerals}\n                  onFocus={handleRomanNumerals}\n                  placeholder=\"Roman numerals goes here...\"\n                />\n                { firstIntNum && <span className=\"label\">{firstIntNum}</span> }\n              </div>\n              <div className=\"app-input\">\n                <input\n                  className=\"app-input__field\"\n                  type=\"text\"\n                  value={secondRomanNum}\n                  onChange={handleRomanNumerals2}\n                  onFocus={handleRomanNumerals2}\n                  placeholder=\"Roman numerals goes here...\"\n                />\n                { secondIntNum && <span className=\"label\">{secondIntNum}</span> }\n              </div>\n            </div>\n\n            <div className=\"app-form__block\">\n              <button onClick={(e) => HandleResultClick(e, 'plus')} className=\"app-form__btn\">\n                <span>+</span>\n              </button>\n              <button onClick={(e) => HandleResultClick(e, 'minus')} className=\"app-form__btn\">\n                <span>-</span>\n              </button>\n              <button onClick={(e) => HandleResultClick(e, 'multiply')} className=\"app-form__btn\">\n                <span className=\"multi\">*</span>\n              </button>\n            </div>\n\n            <div className=\"app-form__result\">\n              <div className={`block ${result ? `show` : `hide`}`}>\n                {result}\n                { resultInt && <span className=\"label\">{resultInt}</span> }\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </main>\n  )\n};\n\nexport default Calculator;\n","const aux = props => props.children;\n\nexport default aux;\n","import React from 'react';\nimport './Header.scss';\n\nconst Header = () => {\n  return (\n    <header className=\"page-header\">\n      <h1>Roman calculator</h1>\n      <p>Add 2 Roman numerals together. <br />\n      The answer will also be represented as a Roman numeral.</p>\n      <small>*Roman numerals only include whole numbers, except zero.</small>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = () => {\n  return (\n    <footer className=\"page-footer\">\n      <ul className=\"list\">\n        <li>Case sensitive (only uppercase)</li>\n        <li>Numbers within range 1-3999</li>\n        <li>Supports addition, subtraction and multiplication</li>\n      </ul>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Calculator from './components/Calculator/Calculator';\nimport Aux from './components/Aux';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport './styles/index.scss';\n\nfunction App() {\n  return (\n    <Aux>\n      <Header />\n      <Calculator />\n      <Footer />\n    </Aux>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nReactDOM.render(app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}